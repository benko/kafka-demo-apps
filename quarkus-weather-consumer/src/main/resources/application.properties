# global bootstrap server list (there can be one per-channel)
kafka.bootstrap.servers = localhost:9092,localhost:9192,localhost:9292

# SSL/PLAINTEXT connection
kafka.security.protocol = PLAINTEXT
# kafka.ssl.truststore.location = ABSOLUTE_PATH_TO_WORKSPACE_FOLDER/truststore.jks
# kafka.ssl.truststore.password = password

# client id
consumer.client.id = unique-345642

# Kafka connector
mp.messaging.incoming.weather-forecast.connector = smallrye-kafka
mp.messaging.incoming.weather-forecast.topic = weather-forecast
mp.messaging.incoming.weather-forecast.group.id = weatherApp
mp.messaging.incoming.weather-forecast.poll-timeout = 1000

# arbitrary client config can be provided by this bean as defaults, but is overridden by any property here
mp.messaging.incoming.weather-forecast.kafka-configuration = quarkus-consumer-configs

# mp.messaging.incoming.weather-forecast.commit-strategy = ignore/latest/throttled
# mp.messaging.incoming.weather-forecast.throttled.unprocessed-record-max-age.ms = 60000

# mp.messaging.incoming.weather-forecast.failure-strategy = fail/ignore/dead-letter-queue
# mp.messaging.incoming.weather-forecast.dead-letter-queue.topic = DLQ
# mp.messaging.incoming.weather-forecast.dead-letter-queue.key.serializer =
# mp.messaging.incoming.weather-forecast.dead-letter-queue.value.serializer =

mp.messaging.incoming.weather-forecast.key.deserializer = org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.weather-forecast.value.deserializer = com.redhat.training.kafka.model.WeatherObjectDeserializer

# AVRO & schema registry
# mp.messaging.incoming.weather-forecast.value.deserializer=io.apicurio.registry.utils.serde.AvroKafkaDeserializer
# mp.messaging.incoming.weather-forecast.apicurio.registry.url = https:.../
# mp.messaging.incoming.weather-forecast.apicurio.registry.use-specific-avro-reader = true

# disable dev services
quarkus.kafka.devservices.enabled=false
